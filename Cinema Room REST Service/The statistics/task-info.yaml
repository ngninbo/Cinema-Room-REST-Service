type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    public class Seat extends Purchase {

        private boolean isBooked;

        public Seat(int row, int column) {
            super(row, column);
            this.isBooked = false;
        }

        public Seat(int row, int column, boolean isBooked) {
            super(row, column);
            this.isBooked = isBooked;
        }

        public boolean isBooked() {
            return isBooked;
        }

        public void setBooked(boolean booked) {
            isBooked = booked;
        }
    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;

    import java.util.List;

    public class Cinema {

        private int total_rows;
        private int total_columns;
        private List<Ticket> available_seats;

        public Cinema(int total_rows, int total_columns, List<Ticket> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Ticket> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Ticket> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaServiceImpl.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.*;
    import org.springframework.stereotype.Service;

    import java.util.*;
    import java.util.concurrent.ConcurrentHashMap;

    @Service
    public class CinemaServiceImpl implements CinemaService {

        int total_rows = 9;
        int total_columns = 9;
        int firstRowsPrice = 10;
        int lastRowPrice = 8;

        List<Ticket> ticketList;
        List<Seat> seatList;
        ConcurrentHashMap<String, PurchasedTicket> purchasedTicketMap = new ConcurrentHashMap<>();

        {
            ticketList = getTicketList();
            seatList = generateSeats();
        }

        @Override
        public PurchasedTicket purchase(Purchase purchase) {
            PurchasedTicket ticket = null;
            for (int i = 0; i < seatList.size(); i++) {
               Seat seat = seatList.get(i);
               if (!isBooked(purchase, seat)) {
                   seat.setBooked(true);
                   seatList.set(i, seat);
                   for (int j = 0; j < ticketList.size(); j++) {
                       Ticket tmp = ticketList.get(j);
                       if (tmp.getColumn() == purchase.getColumn() && tmp.getRow() == purchase.getRow()) {
                           String token = UUID.randomUUID().toString();
                           ticket = new PurchasedTicket(token, tmp);
                           purchasedTicketMap.put(token, ticket);
                           ticketList.remove(j);
                           break;
                       }
                   }
               }
           }
            return ticket;
        }

        private boolean isBooked(Purchase purchase, Seat seat) {
            return seat.getRow() == purchase.getRow() && seat.getColumn() == purchase.getColumn() && !seat.isBooked();
        }

        @Override
        public Cinema getCinemaInfo() {
            return new Cinema(total_rows, total_columns, ticketList);
        }

        @Override
        public boolean validate(Purchase purchase) {
            return purchase.getRow() > 0 && purchase.getRow() < total_rows &&
                    purchase.getColumn() > 0 && purchase.getColumn() < total_columns;
        }

        @Override
        public Map<String, Ticket> refund(Map<String, String> token) {
            Map<String, Ticket> returnTicket = null;
            for (Map.Entry<String, PurchasedTicket> ticket : purchasedTicketMap.entrySet()) {
                if (token.get("token").equals(ticket.getKey())) {
                    // Get refund ticket
                    Ticket purchaseTicket = ticket.getValue().getTicket();
                    // Which seat?
                    Seat seat = new Seat(purchaseTicket.getRow(), purchaseTicket.getColumn(), false);
                    seatList.add(seat);
                    returnTicket = new HashMap<>();
                    returnTicket.put("returned_ticket", purchaseTicket);
                    ticketList.add(purchaseTicket);
                    ticketList.sort((t1, t2) -> {
                        if (t1.equals(t2)) {
                            return 0;
                        } else {
                            return -1;
                        }
                    });
                    purchasedTicketMap.remove(ticket.getKey(), ticket.getValue());
                    break;
                }
            }
            return returnTicket;
        }

        List<Ticket> getTicketList() {

            List<Ticket> seats = new ArrayList<>();
            for (int i = 1; i <= total_rows; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    Ticket seat = i <= 4 ? new Ticket(i, j, firstRowsPrice) : new Ticket(i, j, lastRowPrice);
                    seats.add(seat);
                }
            }

            return seats;
        }

        List<Seat> generateSeats() {

            List<Seat> seats = new ArrayList<>();
            for (int i = 1; i <= total_rows; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    Seat seat = new Seat(i, j);
                    seats.add(seat);
                }
            }

            return seats;
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.Cinema;
    import cinema.model.Purchase;
    import cinema.model.PurchasedTicket;
    import cinema.model.Ticket;
    import cinema.service.CinemaService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.HashMap;
    import java.util.Map;

    @RestController
    public class CinemaController {

        private final CinemaService cinemaService;
        private Map<String, String> error = new HashMap<>();

        public CinemaController(@Autowired CinemaService cinemaService) {
            this.cinemaService = cinemaService;
            error.put("error", "");
        }

        @GetMapping("/seats")
        public ResponseEntity<Cinema> getSeats() {
            return new ResponseEntity<>(cinemaService.getCinemaInfo(), HttpStatus.OK);
        }

        @PostMapping("/purchase")
        public Object purchase(@RequestBody Purchase purchase) {

            if (cinemaService.validate(purchase)) {
                PurchasedTicket ticket = cinemaService.purchase(purchase);
                if (ticket != null) {
                    return new ResponseEntity<>(ticket, HttpStatus.OK);
                } else {
                    error.replace("error", "The ticket has been already purchased!");
                    return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
                }
            } else {
                error.replace("error", "The number of a row or a column is out of bounds!");
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

        @PostMapping("/return")
        public Object refund(@RequestBody Map<String, String> token) {
            error.replace("error", "Wrong token!");
            Map<String, Ticket> refundTicket = cinemaService.refund(token);

            if (refundTicket != null) {
                return new ResponseEntity<>(refundTicket, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Cinema;
    import cinema.model.Purchase;
    import cinema.model.PurchasedTicket;
    import cinema.model.Ticket;

    import java.util.Map;

    public interface CinemaService {

        PurchasedTicket purchase(Purchase purchase);
        Cinema getCinemaInfo();
        boolean validate(Purchase purchase);
        Map<String, Ticket> refund(Map<String, String> token);
    }
  learner_created: true
- name: src/cinema/model/Purchase.java
  visible: true
  text: |
    package cinema.model;

    import java.util.Objects;

    public class Purchase {

        private int row;
        private int column;

        public Purchase() {
        }

        public Purchase(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Purchase)) return false;
            Purchase purchase = (Purchase) o;
            return getRow() == purchase.getRow() && getColumn() == purchase.getColumn();
        }

        @Override
        public int hashCode() {
            return Objects.hash(getRow(), getColumn());
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    import java.util.Objects;

    public class Ticket extends Purchase {

        private int price;

        public Ticket(int row, int column, int price) {
            super(row, column);
            this.price = price;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Ticket)) return false;
            if (!super.equals(o)) return false;
            Ticket ticket = (Ticket) o;
            return getPrice() == ticket.getPrice();
        }

        @Override
        public int hashCode() {
            return Objects.hash(super.hashCode(), getPrice());
        }
    }
  learner_created: true
- name: src/cinema/model/PurchasedTicket.java
  visible: true
  text: |
    package cinema.model;

    public class PurchasedTicket {

        private String token;
        private Ticket ticket;

        public PurchasedTicket(String token, Ticket ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Ticket getTicket() {
            return ticket;
        }

        public void setTicket(Ticket ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/model/Stats.java
  visible: true
  learner_created: true
- name: src/cinema/util/Message.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 17 Jan 2022 10:49:07 UTC
record: -1
